From 7fe633525694ccfa32a8c2b3632be43ea0a06873 Mon Sep 17 00:00:00 2001
From: Sebastian Panceac <sebastian@resin.io>
Date: Thu, 15 Feb 2018 10:22:49 +0100
Subject: [PATCH] Add support for Quectel EC20 modem

Upstream-Status: Pending

Signed-off-by: Sebastian Panceac <sebastian@resin.io>
---
 drivers/net/usb/qmi_wwan.c    | 141 +++++++++++++++++++++++++++++++++++++++++-
 drivers/usb/serial/option.c   |  25 ++++++++
 drivers/usb/serial/qcserial.c |   1 -
 drivers/usb/serial/usb_wwan.c |  13 ++++
 4 files changed, 177 insertions(+), 3 deletions(-)

diff --git a/drivers/net/usb/qmi_wwan.c b/drivers/net/usb/qmi_wwan.c
index 34d997c..eaeeaae 100644
--- a/drivers/net/usb/qmi_wwan.c
+++ b/drivers/net/usb/qmi_wwan.c
@@ -46,6 +46,74 @@
  * commands on a serial interface
  */
 
+#if 1	//Added by Quectel
+#include <linux/etherdevice.h>
+struct sk_buff *qmi_wwan_tx_fixup(struct usbnet *dev, struct sk_buff *skb, gfp_t flags)
+{
+    if (dev->udev->descriptor.idVendor != cpu_to_le16(0x2C7C)) 
+	     return skb;
+
+    // Skip Ethernet header from message 
+	if (skb_pull(skb, ETH_HLEN)) {
+         return skb;
+    } else {
+         dev_err(&dev->intf->dev,	"Packet Dropped ");
+    }
+
+    // Filter the packet out, release it 
+	dev_kfree_skb_any(skb);
+    return NULL;
+}
+
+#include <linux/version.h>
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,9,1 ))
+static int qmi_wwan_rx_fixup(struct usbnet *dev, struct sk_buff *skb)
+{
+    be16 proto;
+
+    if (dev->udev->descriptor.idVendor != cpu_to_le16(0x2C7C)) 
+	     return 1;
+
+    /* This check is no longer done by usbnet */ 
+	if (skb->len < dev->net->hard_header_len)
+         return 0;
+
+    switch (skb->data[0] & 0xf0) 
+	{ case 0x40:
+        proto = htons(ETH_P_IP);
+        break;
+	case 0x60:
+	   proto = htons(ETH_P_IPV6); 
+	   break;
+    case 0x00:
+       if (is_multicast_ether_addr(skb->data)) 
+	         return 1;
+       /* possibly bogus destination - rewrite just in case */ 
+	   skb_reset_mac_header(skb);
+       goto fix_dest; 
+	default:
+       /* pass along other packets without modifications */ 
+	   return 1;
+    }
+	if (skb_headroom(skb) < ETH_HLEN) 
+	     return 0;
+    skb_push(skb, ETH_HLEN); 
+	skb_reset_mac_header(skb); 
+	eth_hdr(skb)->h_proto = proto;
+    memset(eth_hdr(skb)->h_source, 0, ETH_ALEN); 
+fix_dest:
+    memcpy(eth_hdr(skb)->h_dest, dev->net->dev_addr, ETH_ALEN); 
+	return 1;
+}
+
+/* very simplistic detection of IPv4 or IPv6 headers */ 
+static bool possibly_iphdr(const char *data)
+{
+     return (data[0] & 0xd0) == 0x40;
+}
+#endif
+#endif
+
 /* driver specific data */
 struct qmi_wwan_state {
 	struct usb_driver *subdriver;
@@ -442,6 +510,28 @@ static int qmi_wwan_bind(struct usbnet *dev, struct usb_interface *intf)
 	}
 	dev->net->netdev_ops = &qmi_wwan_netdev_ops;
 	dev->net->sysfs_groups[0] = &qmi_wwan_sysfs_attr_group;
+	
+#if 1 //Added by Quectel
+      if (dev->udev->descriptor.idVendor == cpu_to_le16(0x2C7C)) {
+           dev_info(&intf->dev,	"Quectel EC21&EC25&EC20 R2.0 work on RawIP mode\n"); 
+		   dev->net->flags |= IFF_NOARP;
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,9,1 ))
+           /* make MAC addr easily distinguishable from an IP header */
+		   if (possibly_iphdr(dev->net->dev_addr)) {
+                dev->net->dev_addr[0] |= 0x02;	/* set local assignment bit */ 
+				dev->net->dev_addr[0] &= 0xbf;	/* clear "IP" bit */
+		   }
+#endif
+           usb_control_msg( interface_to_usbdev(intf),
+              usb_sndctrlpipe(interface_to_usbdev(intf), 0),
+              0x22, //USB_CDC_REQ_SET_CONTROL_LINE_STATE
+              0x21, //USB_DIR_OUT | USB_TYPE_CLASS | USB_RECIP_INTERFACE
+              1, //active CDC DTR
+              intf->cur_altsetting->desc.bInterfaceNumber, 
+			  NULL, 0, 100);
+    }
+#endif
+
 err:
 	return status;
 }
@@ -533,6 +623,36 @@ static const struct driver_info	qmi_wwan_info = {
 	.unbind		= qmi_wwan_unbind,
 	.manage_power	= qmi_wwan_manage_power,
 	.rx_fixup       = qmi_wwan_rx_fixup,
+#if 1 //Added by Quectel
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 4,5,0 ))
+      .tx_fixup	  = qmi_wwan_tx_fixup,
+#endif
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,9,1 ))
+      .rx_fixup	  = qmi_wwan_rx_fixup,
+#endif
+#endif
+};
+
+static const struct driver_info qmi_wwan_force_int4 = {
+#if 1 //Added by Quectel
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 4,5,0 ))
+      .tx_fixup	  = qmi_wwan_tx_fixup,
+#endif
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,9,1 ))
+      .rx_fixup	  = qmi_wwan_rx_fixup,
+#endif
+#endif
+};
+
+static const struct driver_info qmi_wwan_shared = {
+#if 1 //Added by Quectel
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 4,5,0 ))
+      .tx_fixup	  = qmi_wwan_tx_fixup,
+#endif
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,9,1 ))
+      .rx_fixup	  = qmi_wwan_rx_fixup,
+#endif
+#endif
 };
 
 static const struct driver_info	qmi_wwan_info_quirk_dtr = {
@@ -566,6 +686,25 @@ static const struct driver_info	qmi_wwan_info_quirk_dtr = {
 	QMI_FIXED_INTF(vend, prod, 0)
 
 static const struct usb_device_id products[] = {
+#if 1	//Added by Quectel
+#ifndef QMI_FIXED_INTF
+/* map QMI/wwan function by a fixed interface number */
+#define QMI_FIXED_INTF(vend, prod, num) \
+        .match_flags = USB_DEVICE_ID_MATCH_DEVICE |
+USB_DEVICE_ID_MATCH_INT_INFO, \
+      .idVendor	    = vend, \
+      .idProduct	= prod, \
+      .bInterfaceClass	= 0xff, \
+      .bInterfaceSubClass = 0xff, \
+      .bInterfaceProtocol = 0xff, \
+	  .driver_info        = (unsigned long)&qmi_wwan_force_int##num,
+#endif
+   { QMI_FIXED_INTF(0x05C6, 0x9003, 4) },	/* Quectel UC20 */
+   { QMI_FIXED_INTF(0x05C6, 0x9215, 4) },	/* Quectel EC20 */
+   { QMI_FIXED_INTF(0x2C7C, 0x0125, 4) },	/* Quectel EC25/EC20 R2.0 */
+   { QMI_FIXED_INTF(0x2C7C, 0x0121, 4) },	/* Quectel EC21 */
+#endif
+
 	/* 1. CDC ECM like devices match on the control interface */
 	{	/* Huawei E392, E398 and possibly others sharing both device id and more... */
 		USB_VENDOR_AND_INTERFACE_INFO(HUAWEI_VENDOR_ID, USB_CLASS_VENDOR_SPEC, 1, 9),
@@ -961,8 +1100,6 @@ static const struct usb_device_id products[] = {
 	{QMI_GOBI_DEVICE(0x05c6, 0x9225)},	/* Sony Gobi 2000 Modem device (N0279, VU730) */
 	{QMI_GOBI_DEVICE(0x05c6, 0x9245)},	/* Samsung Gobi 2000 Modem device (VL176) */
 	{QMI_GOBI_DEVICE(0x03f0, 0x251d)},	/* HP Gobi 2000 Modem device (VP412) */
-	{QMI_GOBI_DEVICE(0x05c6, 0x9215)},	/* Acer Gobi 2000 Modem device (VP413) */
-	{QMI_FIXED_INTF(0x05c6, 0x9215, 4)},	/* Quectel EC20 Mini PCIe */
 	{QMI_GOBI_DEVICE(0x05c6, 0x9265)},	/* Asus Gobi 2000 Modem device (VR305) */
 	{QMI_GOBI_DEVICE(0x05c6, 0x9235)},	/* Top Global Gobi 2000 Modem device (VR306) */
 	{QMI_GOBI_DEVICE(0x05c6, 0x9275)},	/* iRex Technologies Gobi 2000 Modem device (VR307) */
diff --git a/drivers/usb/serial/option.c b/drivers/usb/serial/option.c
index af67a0d..c71fac9 100644
--- a/drivers/usb/serial/option.c
+++ b/drivers/usb/serial/option.c
@@ -670,6 +670,12 @@ static const struct option_blacklist_info cinterion_rmnet2_blacklist = {
 };
 
 static const struct usb_device_id option_ids[] = {
+    //Added by Quectel
+    { USB_DEVICE(0x05C6, 0x9090) }, /* Quectel UC15 */
+    { USB_DEVICE(0x05C6, 0x9003) }, /* Quectel UC20 */
+    { USB_DEVICE(0x05C6, 0x9215) }, /* Quectel EC20 */
+    { USB_DEVICE(0x2C7C, 0x0125) }, /* Quectel EC25/EC20 R2.0 */
+    { USB_DEVICE(0x2C7C, 0x0121) }, /* Quectel EC21 */
 	{ USB_DEVICE(OPTION_VENDOR_ID, OPTION_PRODUCT_COLT) },
 	{ USB_DEVICE(OPTION_VENDOR_ID, OPTION_PRODUCT_RICOLA) },
 	{ USB_DEVICE(OPTION_VENDOR_ID, OPTION_PRODUCT_RICOLA_LIGHT) },
@@ -2057,6 +2063,9 @@ static struct usb_serial_driver option_1port_device = {
 #ifdef CONFIG_PM
 	.suspend           = usb_wwan_suspend,
 	.resume            = usb_wwan_resume,
+#if 1	//Added by Quectel
+    .reset_resume	= usb_wwan_resume,
+#endif
 #endif
 };
 
@@ -2095,6 +2104,22 @@ static int option_probe(struct usb_serial *serial,
 	    dev_desc->idProduct == cpu_to_le16(SAMSUNG_PRODUCT_GT_B3730) &&
 	    iface_desc->bInterfaceClass != USB_CLASS_CDC_DATA)
 		return -ENODEV;
+		
+//Added by Quectel
+//Quectel UC20's interface 4 can be used as USB Network device
+    if	(serial->dev->descriptor.idVendor	==	cpu_to_le16(0x05C6)  &&
+serial->dev->descriptor.idProduct == cpu_to_le16(0x9003)
+        && serial->interface->cur_altsetting->desc.bInterfaceNumber >= 4)
+		return -ENODEV;
+//Quectel EC20's interface 4 can be used as USB Network device
+    if	(serial->dev->descriptor.idVendor	==	cpu_to_le16(0x05C6)  &&
+serial->dev->descriptor.idProduct == cpu_to_le16(0x9215)
+        && serial->interface->cur_altsetting->desc.bInterfaceNumber >= 4)
+		return -ENODEV;
+//Quectel EC21&EC25&EC20 R2.0's interface 4 can be used as USB Network device
+    if	(serial->dev->descriptor.idVendor	==  cpu_to_le16(0x2C7C)
+        && serial->interface->cur_altsetting->desc.bInterfaceNumber >= 4)
+		return -ENODEV;
 
 	/* Store the blacklist info so we can use it during attach. */
 	usb_set_serial_data(serial, (void *)blacklist);
diff --git a/drivers/usb/serial/qcserial.c b/drivers/usb/serial/qcserial.c
index 38b3f0d..a7f95d6 100644
--- a/drivers/usb/serial/qcserial.c
+++ b/drivers/usb/serial/qcserial.c
@@ -92,7 +92,6 @@ static const struct usb_device_id id_table[] = {
 	{USB_DEVICE(0x03f0, 0x241d)},	/* HP Gobi 2000 QDL device (VP412) */
 	{USB_DEVICE(0x03f0, 0x251d)},	/* HP Gobi 2000 Modem device (VP412) */
 	{USB_DEVICE(0x05c6, 0x9214)},	/* Acer Gobi 2000 QDL device (VP413) */
-	{USB_DEVICE(0x05c6, 0x9215)},	/* Acer Gobi 2000 Modem device (VP413) */
 	{USB_DEVICE(0x05c6, 0x9264)},	/* Asus Gobi 2000 QDL device (VR305) */
 	{USB_DEVICE(0x05c6, 0x9265)},	/* Asus Gobi 2000 Modem device (VR305) */
 	{USB_DEVICE(0x05c6, 0x9234)},	/* Top Global Gobi 2000 QDL device (VR306) */
diff --git a/drivers/usb/serial/usb_wwan.c b/drivers/usb/serial/usb_wwan.c
index 59bfcb3..757fa53 100644
--- a/drivers/usb/serial/usb_wwan.c
+++ b/drivers/usb/serial/usb_wwan.c
@@ -502,6 +502,19 @@ static struct urb *usb_wwan_setup_urb(struct usb_serial_port *port,
 			  usb_sndbulkpipe(serial->dev, endpoint) | dir,
 			  buf, len, callback, ctx);
 
+    //Added by Quectel for Zero Packet
+	if (dir == USB_DIR_OUT) {
+	      struct usb_device_descriptor *desc = &serial->dev->descriptor;
+		  if (desc->idVendor == cpu_to_le16(0x05C6) && desc->idProduct == cpu_to_le16(0x9090))
+               urb->transfer_flags |= URB_ZERO_PACKET;
+		  if (desc->idVendor == cpu_to_le16(0x05C6) && desc->idProduct == cpu_to_le16(0x9003))
+               urb->transfer_flags |= URB_ZERO_PACKET;
+		  if (desc->idVendor == cpu_to_le16(0x05C6) && desc->idProduct == cpu_to_le16(0x9215))
+               urb->transfer_flags |= URB_ZERO_PACKET;
+		  if (desc->idVendor == cpu_to_le16(0x2C7C))
+		       urb->transfer_flags |= URB_ZERO_PACKET;
+}
+
 	return urb;
 }
 
-- 
2.7.4

