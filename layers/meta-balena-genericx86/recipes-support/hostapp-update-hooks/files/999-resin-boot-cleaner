#!/bin/sh

#
# Script which cleans up boot partition of redundant files
#

set -o errexit

. /usr/sbin/balena-config-vars
. /usr/libexec/os-helpers-fs

DURING_UPDATE=${DURING_UPDATE:-0}

if [ "$DURING_UPDATE" = "1" ]; then
	grub_cfg=$(find -L "$BALENA_BOOT_MOUNTPOINT" -name grub.cfg)
	if  grep -q "search --set=root" "$grub_cfg" ; then
		if [ -e "$BALENA_BOOT_MOUNTPOINT/vmlinuz" ]; then
			# Testing the destination sysroot bzImage is tricky. Lets check current root
			# instead as all future roots will have the kernel in root partition in /boot
			# This leaves the kernel lying around in boot partition until the next HUP
			if [ -e "/boot/bzImage" ]; then
				printf "[INFO] grub.cfg reads kernel from root partitions but found vmlinuz in boot \n"
				printf "[INFO] removing $BALENA_BOOT_MOUNTPOINT/vmlinuz \n"
				rm -f "$BALENA_BOOT_MOUNTPOINT/vmlinuz" || true
				sync -f "$BALENA_BOOT_MOUNTPOINT"
			fi
		fi
	fi

	# make sure the bootstrap code (boot.img) is removed in case we are using EFI boot
	if [ -d /sys/firmware/efi ] ; then
		boot_dev=$(findmnt --noheadings --canonicalize --output SOURCE "$BALENA_BOOT_MOUNTPOINT")
		type=$(lsblk -no TYPE "${boot_dev}")
		if [ "${type}" = "crypt" ]; then
			boot_part="$(lsblk -sJ "${boot_dev}" | jq -r '.blockdevices[].children[].name')"
		else
			boot_part="$(lsblk -sJ "${boot_dev}" | jq -r '.blockdevices[].name')"
		fi
		device=$(lsblk "/dev/$boot_part" -dnlo PKNAME)
		pttype=$(get_part_table_type "${device}")

		if [ "${pttype}" = "mbr" ]; then
			dd if=/dev/zero of="/dev/${device}" bs=446 count=1
		fi

		if [ "${type}" != "crypt" ]; then
			# re-add the EFI entry for resinOS boot from internal media as some EFI firmwares are buggy and won't detect the old entry anymore
			# first remove existing resinOS entries so we won't have duplicates
			# Do not do this on systems with LUKS-encrypted drives though, the boot order in this case is protected by PCR checksums.
			# Touching it in any way would make the system unbootable.
			printf "[INFO] Re-add EFI boot entry for starting resinOS from internal media.\n"
			mount -t efivarfs efivarfs /sys/firmware/efi/efivars
			duplicates=`efibootmgr | grep resinOS |sed 's/Boot*//g' | sed 's/* resinOS//g'`
			for i in $duplicates; do efibootmgr -B -b $i; done
			efibootmgr -c -d $device -p 1 -L "resinOS" -l "\EFI\BOOT\bootx64.efi"
		fi
	fi
fi
